Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var input = function () {
      var delta = A2($Signal.map,
      function (t) {
         return t / 20;
      },
      $Time.fps(30));
      return A2($Signal.sampleOn,
      delta,
      A3($Signal.map2,
      F2(function (v0,v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }),
      delta,
      $Keyboard.arrows));
   }();
   var view = F2(function (_v0,
   bob) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var step = _U.cmp(bob.stepFrame,
                 5) > -1 ? "left" : "right";
                 var dir = function () {
                    var _v4 = bob.dir;
                    switch (_v4.ctor)
                    {case "Left": return "left";
                       case "Right": return "right";}
                    _U.badCase($moduleName,
                    "between lines 97 and 101");
                 }();
                 var verb = _U.cmp(bob.y,
                 0) > 0 ? "jump" : !_U.eq(bob.vx,
                 0) ? "walk" : "stand";
                 var src = function () {
                    switch (verb)
                    {case "walk":
                       return A2($Basics._op["++"],
                         "bob-",
                         A2($Basics._op["++"],
                         verb,
                         A2($Basics._op["++"],
                         "-",
                         A2($Basics._op["++"],
                         dir,
                         A2($Basics._op["++"],
                         "-",
                         A2($Basics._op["++"],
                         step,
                         ".png"))))));}
                    return A2($Basics._op["++"],
                    "bob-",
                    A2($Basics._op["++"],
                    verb,
                    A2($Basics._op["++"],
                    "-",
                    A2($Basics._op["++"],
                    dir,
                    ".png"))));
                 }();
                 var bobImage = A3($Graphics$Element.image,
                 200,
                 300,
                 src);
                 var $ = {ctor: "_Tuple2"
                         ,_0: $Basics.toFloat(_v0._0)
                         ,_1: $Basics.toFloat(_v0._1)},
                 w = $._0,
                 h = $._1;
                 var groundY = 175 - h / 2;
                 var position = {ctor: "_Tuple2"
                                ,_0: bob.x
                                ,_1: bob.y + groundY};
                 return A3($Graphics$Collage.collage,
                 _v0._0,
                 _v0._1,
                 _L.fromArray([$Graphics$Collage.filled(A3($Color.rgb,
                              174,
                              238,
                              238))(A2($Graphics$Collage.rect,
                              w,
                              h))
                              ,$Graphics$Collage.move({ctor: "_Tuple2"
                                                      ,_0: 0
                                                      ,_1: 24 - h / 2})($Graphics$Collage.filled(A3($Color.rgb,
                              74,
                              167,
                              43))(A2($Graphics$Collage.rect,
                              w,
                              50)))
                              ,$Graphics$Collage.move(position)($Graphics$Collage.toForm(bobImage))]));
              }();}
         _U.badCase($moduleName,
         "between lines 88 and 127");
      }();
   });
   var physics = F2(function (dt,
   bob) {
      return _U.replace([["x"
                         ,bob.x + dt * bob.vx]
                        ,["y"
                         ,A2($Basics.max,
                         0,
                         bob.y + dt * bob.vy)]],
      bob);
   });
   var gravity = F2(function (dt,
   bob) {
      return _U.replace([["vy"
                         ,_U.cmp(bob.y,
                         0) > 0 ? bob.vy - dt / 3 : 0]],
      bob);
   });
   var jump = F2(function (keys,
   bob) {
      return _U.cmp(keys.y,
      0) > 0 && _U.eq(bob.vy,
      0) ? _U.replace([["vy",6.0]],
      bob) : bob;
   });
   var Keys = F2(function (a,b) {
      return {_: {},x: a,y: b};
   });
   var Right = {ctor: "Right"};
   var bob = {_: {}
             ,dir: Right
             ,stepFrame: 0
             ,vx: 0
             ,vy: 0
             ,x: 0
             ,y: 0};
   var Left = {ctor: "Left"};
   var walk = F2(function (keys,
   bob) {
      return _U.replace([["vx"
                         ,$Basics.toFloat(keys.x)]
                        ,["stepFrame"
                         ,_U.cmp(bob.stepFrame,
                         10) < 1 ? bob.stepFrame + 1 : 0]
                        ,["dir"
                         ,_U.cmp(keys.x,
                         0) < 0 ? Left : _U.cmp(keys.x,
                         0) > 0 ? Right : bob.dir]],
      bob);
   });
   var update = F2(function (_v6,
   bob) {
      return function () {
         switch (_v6.ctor)
         {case "_Tuple2":
            return physics(_v6._0)(walk(_v6._1)(jump(_v6._1)(gravity(_v6._0)(A2($Debug.watch,
              "bob",
              bob)))));}
         _U.badCase($moduleName,
         "between lines 42 and 46");
      }();
   });
   var main = A3($Signal.map2,
   view,
   $Window.dimensions,
   A3($Signal.foldp,
   update,
   bob,
   input));
   var Model = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,dir: e
             ,stepFrame: f
             ,vx: c
             ,vy: d
             ,x: a
             ,y: b};
   });
   _elm.Main.values = {_op: _op
                      ,Model: Model
                      ,Left: Left
                      ,Right: Right
                      ,Keys: Keys
                      ,bob: bob
                      ,update: update
                      ,jump: jump
                      ,gravity: gravity
                      ,physics: physics
                      ,walk: walk
                      ,view: view
                      ,main: main
                      ,input: input};
   return _elm.Main.values;
};